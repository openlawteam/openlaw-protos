plugins {
    // Apply the scala plugin to add support for Scala.
    id "scala"

    // Apply the java-library plugin for API and implementation separation.
    id "java-library"

    // Apply the gradle publishing tooling
    id "maven-publish"
    id "com.jfrog.bintray" version "1.8.5"
}

def scalaVersion = "2.12"
def group = "org.openlaw.protos"
project.version = "0.0.4"
project.group = group

repositories {
    // Use jcenter and mavenCentral for resolving dependencies.
    mavenLocal()
    mavenCentral()
    jcenter()
}

jar {
    archiveBaseName = project.name + "_" + scalaVersion
    manifest {
        attributes("Implementation-Version": "$version")
    }
}

java {
    withSourcesJar()
    withJavadocJar()
}

// Library Dependencies
dependencies {
    // Use the Scala version defined in the scala-builder at https://github.com/openlawteam/scala-builder/blob/master/Dockerfile#L10
    compile "org.scala-lang:scala-library:2.12.11"

    // Use protobuf compiler to compile scala generated classes
    compile "com.github.os72:protoc-jar:3.8.0"
    // Use the ScalaPB plugin to be able to compile the generated Scala classes because they have base types based on scalapb API
    compile "com.thesamet.scalapb:compilerplugin_2.12:0.9.4"
    compile "com.thesamet.scalapb:scalapb-runtime-grpc_2.12:0.9.4"
    compile "com.thesamet.scalapb:scalapb-runtime_2.12:0.9.4"
    // Use google protobuf lib to be able to compile utility types generated from google protobuf API
    compile "com.google.protobuf:protobuf-java:3.10.0"

    // Use Scalatest for testing the generated Scala classes
    testCompile "junit:junit:4.12"
    testCompile "org.scalatest:scalatest_2.12:3.1.0"
    testCompile "org.scalatestplus:junit-4-12_2.12:3.1.0.0"

    // Need scala-xml at test runtime
    testRuntimeOnly "org.scala-lang.modules:scala-xml_2.12:1.2.0"
}

// Library config
def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    developers {
        developer {
            id "fforbeck"
            name "Felipe Forbeck"
            email "dev@openlaw.io"
        }
    }

    scm {
        url "https://github.com/openlawteam/openlaw-protos.git"
    }
}

// Publication tasks
publishing {
    publications {
        mavenJava(MavenPublication) {
          from components.java
          groupId group
          artifactId project.name + "_" + scalaVersion
          version project.version
        }
        bintrayPublication(MavenPublication) {
            from components.java
            groupId group
            artifactId project.name + "_" + scalaVersion
            version project.version
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'Integrate with OpenLaw platform using the External Service gRPC library.')
                root.appendNode('name', 'OpenLaw External Service')
                root.appendNode('url', 'https://github.com/openlawteam/openlaw-protos.git')
                root.children().last() + pomConfig
            }
        }
    }
}


// Bintray setup
bintray {
    user = System.getenv("BINTRAY_USER")
    key = System.getenv("BINTRAY_KEY")
    publications = ["bintrayPublication"] 
    publish = true
    pkg {
        repo = "openlaw-external-service"
        name = "openlaw-external-service"
        userOrg = "openlawos"
        licenses = ["Apache-2.0"]
        vcsUrl = "https://github.com/openlawteam/openlaw-protos.git"
        version {
            desc = "Integration library to create services and connect to OpenLaw platform using gRPC protocol."
            released  = new Date()
            vcsTag = version
        }
    }
}


