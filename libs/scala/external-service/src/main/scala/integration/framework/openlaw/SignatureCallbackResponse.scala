// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package integration.framework.openlaw

@SerialVersionUID(0L)
final case class SignatureCallbackResponse(
    errorMessage: _root_.scala.Predef.String = "",
    status: integration.framework.openlaw.SignatureCallbackResponse.Status = integration.framework.openlaw.SignatureCallbackResponse.Status.FAILURE
    ) extends scalapb.GeneratedMessage with scalapb.Message[SignatureCallbackResponse] with scalapb.lenses.Updatable[SignatureCallbackResponse] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = errorMessage
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = status
        if (__value != integration.framework.openlaw.SignatureCallbackResponse.Status.FAILURE) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(2, __value.value)
        }
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = errorMessage
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = status
        if (__v != integration.framework.openlaw.SignatureCallbackResponse.Status.FAILURE) {
          _output__.writeEnum(2, __v.value)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): integration.framework.openlaw.SignatureCallbackResponse = {
      var __errorMessage = this.errorMessage
      var __status = this.status
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __errorMessage = _input__.readString()
          case 16 =>
            __status = integration.framework.openlaw.SignatureCallbackResponse.Status.fromValue(_input__.readEnum())
          case tag => _input__.skipField(tag)
        }
      }
      integration.framework.openlaw.SignatureCallbackResponse(
          errorMessage = __errorMessage,
          status = __status
      )
    }
    def withErrorMessage(__v: _root_.scala.Predef.String): SignatureCallbackResponse = copy(errorMessage = __v)
    def withStatus(__v: integration.framework.openlaw.SignatureCallbackResponse.Status): SignatureCallbackResponse = copy(status = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = errorMessage
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = status.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(errorMessage)
        case 2 => _root_.scalapb.descriptors.PEnum(status.scalaValueDescriptor)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = integration.framework.openlaw.SignatureCallbackResponse
}

object SignatureCallbackResponse extends scalapb.GeneratedMessageCompanion[integration.framework.openlaw.SignatureCallbackResponse] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[integration.framework.openlaw.SignatureCallbackResponse] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): integration.framework.openlaw.SignatureCallbackResponse = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    integration.framework.openlaw.SignatureCallbackResponse(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      integration.framework.openlaw.SignatureCallbackResponse.Status.fromValue(__fieldsMap.getOrElse(__fields.get(1), integration.framework.openlaw.SignatureCallbackResponse.Status.FAILURE.javaValueDescriptor).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[integration.framework.openlaw.SignatureCallbackResponse] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      integration.framework.openlaw.SignatureCallbackResponse(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        integration.framework.openlaw.SignatureCallbackResponse.Status.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(integration.framework.openlaw.SignatureCallbackResponse.Status.FAILURE.scalaValueDescriptor).number)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SignatureCallbackServiceProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SignatureCallbackServiceProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 2 => integration.framework.openlaw.SignatureCallbackResponse.Status
    }
  }
  lazy val defaultInstance = integration.framework.openlaw.SignatureCallbackResponse(
    errorMessage = "",
    status = integration.framework.openlaw.SignatureCallbackResponse.Status.FAILURE
  )
  sealed trait Status extends _root_.scalapb.GeneratedEnum {
    type EnumType = Status
    def isFailure: _root_.scala.Boolean = false
    def isSuccess: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[Status] = integration.framework.openlaw.SignatureCallbackResponse.Status
  }
  
  object Status extends _root_.scalapb.GeneratedEnumCompanion[Status] {
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[Status] = this
    @SerialVersionUID(0L)
    case object FAILURE extends Status {
      val value = 0
      val index = 0
      val name = "FAILURE"
      override def isFailure: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object SUCCESS extends Status {
      val value = 1
      val index = 1
      val name = "SUCCESS"
      override def isSuccess: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(value: _root_.scala.Int) extends Status with _root_.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.immutable.Seq(FAILURE, SUCCESS)
    def fromValue(value: _root_.scala.Int): Status = value match {
      case 0 => FAILURE
      case 1 => SUCCESS
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = integration.framework.openlaw.SignatureCallbackResponse.javaDescriptor.getEnumTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = integration.framework.openlaw.SignatureCallbackResponse.scalaDescriptor.enums(0)
  }
  implicit class SignatureCallbackResponseLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, integration.framework.openlaw.SignatureCallbackResponse]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, integration.framework.openlaw.SignatureCallbackResponse](_l) {
    def errorMessage: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.errorMessage)((c_, f_) => c_.copy(errorMessage = f_))
    def status: _root_.scalapb.lenses.Lens[UpperPB, integration.framework.openlaw.SignatureCallbackResponse.Status] = field(_.status)((c_, f_) => c_.copy(status = f_))
  }
  final val ERRORMESSAGE_FIELD_NUMBER = 1
  final val STATUS_FIELD_NUMBER = 2
  def of(
    errorMessage: _root_.scala.Predef.String,
    status: integration.framework.openlaw.SignatureCallbackResponse.Status
  ): _root_.integration.framework.openlaw.SignatureCallbackResponse = _root_.integration.framework.openlaw.SignatureCallbackResponse(
    errorMessage,
    status
  )
}
